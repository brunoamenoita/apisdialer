/**
 * APIS Integration Dialer Catix4
 * Documentação APIS - Dialer Catix4 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: desenvolvimento@optjuntos.com.br
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { Campaign } from '../model/campaign';
import { CampaignResult } from '../model/campaignResult';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class CampaignsService {

    protected basePath = 'http://catix4.optjuntos.com.br:8084/dialer';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Add a new campaigns
     * 
     * @param body Object Added Campaign
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addCampaign(body: Campaign, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addCampaign(body: Campaign, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addCampaign(body: Campaign, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addCampaign(body: Campaign, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addCampaign.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post(`${this.basePath}/campaigns`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Active All Campaigns
     * Ativa todas campanhas
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public campaignsActiveGet(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public campaignsActiveGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public campaignsActiveGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public campaignsActiveGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.basePath}/campaigns/active`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes all campaigns
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public campaignsDeleteDelete(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public campaignsDeleteDelete(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public campaignsDeleteDelete(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public campaignsDeleteDelete(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete(`${this.basePath}/campaigns/delete`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Disable All Campaigns
     * Desativa todas campanhas
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public campaignsDisableGet(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public campaignsDisableGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public campaignsDisableGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public campaignsDisableGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.basePath}/campaigns/disable`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Finds All Campaigns
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public campaignsGetAllGet(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public campaignsGetAllGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public campaignsGetAllGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public campaignsGetAllGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.basePath}/campaigns/get-all`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Redial Start All Campaigns
     * Inicia a rediscagem de todas campanhas ativas
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public campaignsRedialStartGet(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public campaignsRedialStartGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public campaignsRedialStartGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public campaignsRedialStartGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.basePath}/campaigns/redial/start`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Redial Stop All Campaigns
     * Encerra a rediscagem de todas campanhas ativas
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public campaignsRedialStopGet(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public campaignsRedialStopGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public campaignsRedialStopGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public campaignsRedialStopGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.basePath}/campaigns/redial/stop`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Start All Campaigns
     * Inicia a discagem de todas campanhas ativas
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public campaignsStartGet(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public campaignsStartGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public campaignsStartGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public campaignsStartGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.basePath}/campaigns/start`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Stop All Campaigns
     * Encerra a discagem de todas campanhas ativas
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public campaignsStopGet(observe?: 'body', reportProgress?: boolean): Observable<any>;
    public campaignsStopGet(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public campaignsStopGet(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public campaignsStopGet(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.basePath}/campaigns/stop`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a campaigns unic
     * 
     * @param campaignUuid Campaign id to delete
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteCampaignId(campaignUuid: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteCampaignId(campaignUuid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteCampaignId(campaignUuid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteCampaignId(campaignUuid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (campaignUuid === null || campaignUuid === undefined) {
            throw new Error('Required parameter campaignUuid was null or undefined when calling deleteCampaignId.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete(`${this.basePath}/campaigns/delete/${encodeURIComponent(String(campaignUuid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Active campaigns by ID
     * Ativa uma campanha específica
     * @param campaignUuid ID of active campaign to return
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getActiveCampaignId(campaignUuid: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getActiveCampaignId(campaignUuid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getActiveCampaignId(campaignUuid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getActiveCampaignId(campaignUuid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (campaignUuid === null || campaignUuid === undefined) {
            throw new Error('Required parameter campaignUuid was null or undefined when calling getActiveCampaignId.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.basePath}/campaigns/active/${encodeURIComponent(String(campaignUuid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find campaigns by ID
     * Returns a single campaign
     * @param campaignUuid ID of campaign to return
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getCampaignId(campaignUuid: number, observe?: 'body', reportProgress?: boolean): Observable<CampaignResult>;
    public getCampaignId(campaignUuid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<CampaignResult>>;
    public getCampaignId(campaignUuid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<CampaignResult>>;
    public getCampaignId(campaignUuid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (campaignUuid === null || campaignUuid === undefined) {
            throw new Error('Required parameter campaignUuid was null or undefined when calling getCampaignId.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.basePath}/campaigns/get-by-id/${encodeURIComponent(String(campaignUuid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Disable campaigns by ID
     * Desativa uma campanha específica
     * @param campaignUuid ID of campaign to return
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getDisableCampaignId(campaignUuid: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getDisableCampaignId(campaignUuid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getDisableCampaignId(campaignUuid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getDisableCampaignId(campaignUuid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (campaignUuid === null || campaignUuid === undefined) {
            throw new Error('Required parameter campaignUuid was null or undefined when calling getDisableCampaignId.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.basePath}/campaigns/disable/${encodeURIComponent(String(campaignUuid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Redial Start campaigns by ID
     * Inicia a rediscagem de uma campanha específica
     * @param campaignUuid ID of campaign to return
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRedialStartCampaignId(campaignUuid: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getRedialStartCampaignId(campaignUuid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getRedialStartCampaignId(campaignUuid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getRedialStartCampaignId(campaignUuid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (campaignUuid === null || campaignUuid === undefined) {
            throw new Error('Required parameter campaignUuid was null or undefined when calling getRedialStartCampaignId.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.basePath}/campaigns/redial/start/${encodeURIComponent(String(campaignUuid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Redial stop campaigns by ID
     * Encerra a rediscagem de uma campanha específica
     * @param campaignUuid ID of reidla stop campaign to return
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRedialStopCampaignId(campaignUuid: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getRedialStopCampaignId(campaignUuid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getRedialStopCampaignId(campaignUuid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getRedialStopCampaignId(campaignUuid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (campaignUuid === null || campaignUuid === undefined) {
            throw new Error('Required parameter campaignUuid was null or undefined when calling getRedialStopCampaignId.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.basePath}/campaigns/redial/stop/${encodeURIComponent(String(campaignUuid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Start campaigns by ID
     * Inicia a discagem de uma campanha específica
     * @param campaignUuid ID of start campaign to return
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getStartCampaignId(campaignUuid: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getStartCampaignId(campaignUuid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getStartCampaignId(campaignUuid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getStartCampaignId(campaignUuid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (campaignUuid === null || campaignUuid === undefined) {
            throw new Error('Required parameter campaignUuid was null or undefined when calling getStartCampaignId.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.basePath}/campaigns/start/${encodeURIComponent(String(campaignUuid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Stop campaigns by ID
     * Encerra a discagem de uma campanha específica
     * @param campaignUuid ID of stop campaign to return
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getStopCampaignId(campaignUuid: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getStopCampaignId(campaignUuid: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getStopCampaignId(campaignUuid: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getStopCampaignId(campaignUuid: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (campaignUuid === null || campaignUuid === undefined) {
            throw new Error('Required parameter campaignUuid was null or undefined when calling getStopCampaignId.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get(`${this.basePath}/campaigns/stop/${encodeURIComponent(String(campaignUuid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update an existing campaigns
     * 
     * @param body Object Added Campaign
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateCampaign(body: Campaign, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateCampaign(body: Campaign, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateCampaign(body: Campaign, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateCampaign(body: Campaign, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateCampaign.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put(`${this.basePath}/campaigns`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

